# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named BlenderLensDistortionExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported


############################
# by Menghan Ho
# 2017/03/29
# Blender Lens Distortion plplug for Natron
#
import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from BlenderLensDistortionExt import *
except ImportError:
    pass

def getPluginID():
    return "tw.wefx.group.0001"

def getLabel():
    return "BlenderLensDistortion"

def getVersion():
    return 3

def getGrouping():
    return "Other"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("BlenderLensDistortion.runSync")
        del param


    # Create the user parameters
    lastNode.ctr = lastNode.createPageParam("ctr", "Controls")
    param = lastNode.createFileParam("blenderLensInfo", "Blender Lens Info")
    param.setSequenceEnabled(False)

    # Add the param to the page
    lastNode.ctr.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.blenderLensInfo = param
    del param

    param = lastNode.createButtonParam("sync", "Sync")

    # Add the param to the page
    lastNode.ctr.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.sync = param
    del param

    param = lastNode.createBooleanParam("distort", "Distort")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.ctr.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.distort = param
    del param

    param = lastNode.createBooleanParam("polynomial", "Polynomia")

    # Add the param to the page
    lastNode.ctr.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(True)
    lastNode.polynomial = param
    del param

    param = lastNode.createDoubleParam("sensor_width", "Sensor Width")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(500, 0)

    # Add the param to the page
    lastNode.ctr.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(23.76000022888184, 0)
    lastNode.sensor_width = param
    del param

    param = lastNode.createDoubleParam("focal_length", "Focal Length")
    param.setMinimum(0, 0)
    param.setMaximum(500, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(500, 0)

    # Add the param to the page
    lastNode.ctr.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(24, 0)
    lastNode.focal_length = param
    del param

    param = lastNode.createDouble2DParam("center", "Center")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(5000, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(5000, 1)

    # Add the param to the page
    lastNode.ctr.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(960, 0)
    param.setValue(540, 1)
    lastNode.center = param
    del param

    param = lastNode.createDouble3DParam("k", "K")
    param.setMinimum(-10, 0)
    param.setMaximum(10, 0)
    param.setDisplayMinimum(-1, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-10, 1)
    param.setMaximum(10, 1)
    param.setDisplayMinimum(-1, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-10, 2)
    param.setMaximum(10, 2)
    param.setDisplayMinimum(-1, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.ctr.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.k = param
    del param

    param = lastNode.createDouble2DParam("p_coeff", "P")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-10, 0)
    param.setDisplayMaximum(10, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(-10, 1)
    param.setDisplayMaximum(10, 1)

    # Add the param to the page
    lastNode.ctr.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.p_coeff = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['ctr', 'Node'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1059, 319)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("Input1")
    lastNode.setPosition(1059, 115)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "Shadertoy1"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("Shadertoy1")
    lastNode.setLabel("Shadertoy1")
    lastNode.setPosition(1071, 207)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupShadertoy1 = lastNode

    param = lastNode.getParam("paramValueBool0")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("paramValueBool1")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("paramValueFloat2")
    if param is not None:
        param.setValue(24, 0)
        del param

    param = lastNode.getParam("paramValueFloat3")
    if param is not None:
        param.setValue(23.76000022888184, 0)
        del param

    param = lastNode.getParam("paramValueVec24")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    param = lastNode.getParam("paramValueVec35")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        del param

    param = lastNode.getParam("paramValueVec26")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("// iChannel0: Source input image\nuniform vec2 principal = vec2( 960.0,540.0 ); //Principal\nuniform float g_sensor_width = 23.76;//Sensor Width\nuniform float focal_length = 22.94066047668457;//Focal Length\nuniform vec3 y_K = vec3(-0.23636922240257263,0.2658398151397705,0.0);//K\nuniform vec2 z_p_coeff = vec2( 0.0f, 0.0f );//P\nuniform bool a_distort = true; //Distort\nuniform bool b_polynomial = false; //Polynomial\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    float fx = focal_length / g_sensor_width * iChannelResolution[0].x;\n    float fy = focal_length / ( g_sensor_width / iChannelResolution[0].x * iChannelResolution[0].y ) * iChannelResolution[0].y;\n\n    \n    float normalized_x = ( fragCoord.x- principal.x ) / fx;\n    float normalized_y = ( fragCoord.y- principal.y ) / fy;\n    \n    float r2 = normalized_x * normalized_x + normalized_y * normalized_y;\n    float r4 = r2 * r2;\n    float r6 = r4 * r2;  \n    float xd = 0.0;\n    float yd = 0.0;\n    float r_coeff;\n    \n    if ( b_polynomial == true ){\n        r_coeff = ( 1 + y_K.x * r2 + y_K.y * r4 + y_K.z * r6 );\n        xd = normalized_x * r_coeff + (2 * z_p_coeff.x * normalized_x * normalized_y) + ( z_p_coeff.y * ( r2 + 2 * normalized_x * normalized_x ));\n        yd = normalized_y * r_coeff + (2 * z_p_coeff.y * normalized_x * normalized_y) + ( z_p_coeff.x * ( r2 + 2 * normalized_y * normalized_y ));    \n        \n    }else{\n        xd = normalized_x / ( 1 + y_K.x * r2 + y_K.y * r4 );\n        yd = normalized_y / ( 1 + y_K.x * r2 + y_K.y * r4 );\n    }\n\n    if ( a_distort == true ){\n        xd =(( xd - normalized_x )* -1) + normalized_x;\n        yd =(( yd - normalized_y )* -1) + normalized_y;\n    }\n    \n    vec2 distort_pos = vec2( fx * xd + principal.x, fy * yd + principal.y );   \n    vec4 col = texture2D(iChannel0, distort_pos.xy/iChannelResolution[0].xy).rgba;\n \n    fragColor = vec4(col).rgba;\n}\n")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("Source input image")
        del param

    param = lastNode.getParam("inputEnable1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video 640x480")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(7, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("bool")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("a_distort")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Distort")
        del param

    param = lastNode.getParam("paramDefaultBool0")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("bool")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("b_polynomial")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("Polynomial")
        del param

    param = lastNode.getParam("paramType2")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName2")
    if param is not None:
        param.setValue("focal_length")
        del param

    param = lastNode.getParam("paramLabel2")
    if param is not None:
        param.setValue("Focal Length")
        del param

    param = lastNode.getParam("paramDefaultFloat2")
    if param is not None:
        param.setValue(22.94066, 0)
        del param

    param = lastNode.getParam("paramType3")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName3")
    if param is not None:
        param.setValue("g_sensor_width")
        del param

    param = lastNode.getParam("paramLabel3")
    if param is not None:
        param.setValue("Sensor Width")
        del param

    param = lastNode.getParam("paramDefaultFloat3")
    if param is not None:
        param.setValue(23.76, 0)
        del param

    param = lastNode.getParam("paramType4")
    if param is not None:
        param.set("vec2")
        del param

    param = lastNode.getParam("paramName4")
    if param is not None:
        param.setValue("principal")
        del param

    param = lastNode.getParam("paramLabel4")
    if param is not None:
        param.setValue("Principal")
        del param

    param = lastNode.getParam("paramDefaultVec24")
    if param is not None:
        param.setValue(959.9999999999999, 0)
        param.setValue(540, 1)
        del param

    param = lastNode.getParam("paramType5")
    if param is not None:
        param.set("vec3")
        del param

    param = lastNode.getParam("paramName5")
    if param is not None:
        param.setValue("y_K")
        del param

    param = lastNode.getParam("paramLabel5")
    if param is not None:
        param.setValue("K")
        del param

    param = lastNode.getParam("paramDefaultVec35")
    if param is not None:
        param.setValue(-0.2363692, 0)
        param.setValue(0.2658398, 1)
        del param

    param = lastNode.getParam("paramType6")
    if param is not None:
        param.set("vec2")
        del param

    param = lastNode.getParam("paramName6")
    if param is not None:
        param.setValue("z_p_coeff")
        del param

    param = lastNode.getParam("paramLabel6")
    if param is not None:
        param.setValue("P")
        del param

    del lastNode
    # End of node "Shadertoy1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupShadertoy1)
    groupShadertoy1.connectInput(0, groupInput1)

    param = groupShadertoy1.getParam("paramValueBool0")
    param.setExpression("thisGroup.getParam(\'distort\').get()", False, 0)
    del param
    param = groupShadertoy1.getParam("paramValueBool1")
    param.setExpression("thisGroup.getParam(\'polynomial\').get()", False, 0)
    del param
    param = groupShadertoy1.getParam("paramValueFloat2")
    param.setExpression("thisGroup.getParam(\'focal_length\').get()", False, 0)
    del param
    param = groupShadertoy1.getParam("paramValueFloat3")
    param.setExpression("thisGroup.getParam(\'sensor_width\').get()", False, 0)
    del param
    param = groupShadertoy1.getParam("paramValueVec24")
    param.setExpression("thisGroup.getParam(\'center\').get()[0]", False, 0)
    param.setExpression("thisGroup.getParam(\'center\').get()[1]", False, 1)
    del param
    param = groupShadertoy1.getParam("paramValueVec35")
    param.setExpression("thisGroup.getParam(\'k\').get()[0]", False, 0)
    param.setExpression("thisGroup.getParam(\'k\').get()[1]", False, 1)
    param.setExpression("thisGroup.getParam(\'k\').get()[2]", False, 2)
    del param
    param = groupShadertoy1.getParam("paramValueVec26")
    param.setExpression("thisGroup.getParam(\'p_coeff\').get()[0]", False, 0)
    param.setExpression("thisGroup.getParam(\'p_coeff\').get()[1]", False, 1)
    del param

    try:
        extModule = sys.modules["BlenderLensDistortionExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
